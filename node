#!/usr/bin/env bash

# nodejs-launcher - https://github.com/Yonle/nodejs-launcher
# A simple nodejs launcher that executes a latest nodejs binary

[ $(uname) = "Windows" ] && echo "Windows Support is not available for this script" && exit 6
export MAIN_DIR=${TMPDIR:-/tmp}/.nodejs-launcher

# Create main directory if there's none
[ ! -d $MAIN_DIR ] && mkdir $MAIN_DIR

# Detect architecture
case $(uname -m) in
armv7l) ARCH=armv7l ;;
aarch64) ARCH=arm64 ;;
x86_64 | amd64) ARCH=x64 ;;
*) echo -e "Unsupported arcitecture:$(uname -m)\nNote: This script doesn't fetch a build from unofficial ones." && exit 6 ;;
esac

# If it's using android, Abort.
# Android is using Bionic libc which has a lot of limitation.
[ "$(uname -o)" = "Android" ] && echo -e "Using nodejs-launcher in Android/Termux is NOT supported.\nAndroid is using Bionic Libc to work. Same thing as what Termux does. Most of termux package (Including NodeJS) is build with Bionic Libc so they'll work natively.\n\nBecause the prebuild binary that nodejs website give mostly need glibc to work, You may try to use proot or chroot instead. Executing glibc binary won't work in Android (except prooted/chrooted environment).\n\nSo please, run \`pkg install nodejs -y\` instead." && exit 6

# Get latest release from nodejs repo
# Reference: https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c#gistcomment-2552690
export LATEST_RELEASE=$(curl -s "https://api.github.com/repos/nodejs/node/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')
export DOWNLOAD_URL="https://nodejs.org/dist/${LATEST_RELEASE}/node-${LATEST_RELEASE}-linux-$ARCH.tar.xz"
export __NODE_PATH=$(echo $MAIN_DIR/node-*/)

# Detect whenever node 16 binary is in ${TMPDIR:-/tmp} directory or no
if [ ! -x $__NODE_PATH/bin/node ]; then
  echo -n "[curl] Extracting node $LATEST_RELEASE.... "
  curl -sL $DOWNLOAD_URL | tar -Jxf - -C $MAIN_DIR
  [ $? != 0 ] && echo "[fail] Failed to Installing node $LATEST_RELEASE. Nake sure you have a stable network connection and try again later." && exit 6
  echo "Installed"

  # Re-export Variable
  export __NODE_PATH=$(echo $MAIN_DIR/node-*/)
fi

# These variable is required in order to load binaries & library from different path.
export LD_LIBRARY_PATH=$__NODE_PATH/lib:$LD_LIBRARY_PATH
export PATH=$__NODE_PATH/bin:${PATH:-/usr/bin}

node "$@"
